generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model User {
  name       String
  email      String   @unique
  password   String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

model documents_info {
  id_original String
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  file_name   String?
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  folder_id   String   @db.Uuid
  folder      folders  @relation(fields: [folder_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model folders {
  created_at         DateTime          @default(now()) @db.Timestamptz(6)
  prompt             String?
  name               String?           @default("")
  ice_breakers       String[]
  can_generate_image Boolean?          @default(true)
  fid_onedrive       String            @unique
  id                 String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id_tenant          String            @db.Uuid
  documents_info     documents_info[]
  tenant             tenants           @relation(fields: [id_tenant], references: [id], onDelete: Cascade)
  visual_identity    visual_identity[]
}

model tenants {
  name        String
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  id_original String    @default("")
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  folders     folders[]
}

model images {
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  description String?
  image_id    String?
  name        String?
  chat_id     String?
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

model visual_identity {
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  name        String?
  description String
  file_id     String?
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  folder_id   String   @db.Uuid
  folder      folders  @relation(fields: [folder_id], references: [id], onDelete: Cascade)
}

model vectorbase {
  id         String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content    String?
  metadata   Json?
  fid_folder String?                @default(dbgenerated("(metadata ->> 'fid_folder'::text)"))
  file_name  String?                @default(dbgenerated("(metadata ->> 'file_name'::text)"))
  doc_id     String?                @default(dbgenerated("(metadata ->> 'doc_id'::text)"))
  embedding  Unsupported("vector")?
}
