generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model User {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  password   String
  created_at DateTime @default(now()) @db.Timestamptz(6)
}

model documents_info {
  id          String   @id @default(cuid())
  id_original String
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  folder_id   String
  file_name   String?
  folder      folders  @relation(fields: [folder_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model folders {
  id                 String   @id @unique @default(cuid())
  id_folder          String   @unique
  id_tenant          String
  created_at         DateTime @default(now()) @db.Timestamptz(6)
  prompt             String?
  name               String?  @default("")
  ice_breakers       String[]
  can_generate_image Boolean? @default(true)

  documents_info  documents_info[]
  tenant          tenants           @relation(fields: [id_tenant], references: [id], onDelete: Cascade)
  visual_identity visual_identity[]
}

model tenants {
  id          String    @id @default(cuid())
  name        String
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  id_original String    @default("")
  folders     folders[]
}

model images {
  id          String   @id @default(cuid())
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  description String?
  image_id    String?
  name        String?
  chat_id     String?
}

// Arquivos enviados para ser a identidade visual do agente
model visual_identity {
  id          String   @id @default(cuid())
  file_id     String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  name        String?
  description String
  folder_id   String

  folder folders @relation(fields: [folder_id], references: [id], onDelete: Cascade)
}
